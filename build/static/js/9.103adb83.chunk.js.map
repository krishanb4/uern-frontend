{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/EarnAPRCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","../node_modules/lodash/max.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","lineHeight","gt","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","Label","img","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvest","scale","mb","id","disabled","onClick","width","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","data","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","maxApr","max","toLocaleString","maximumFractionDigits","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","height","justifyContent","mt","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","FetchStatus","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","console","error","prev","prefix","bold","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","props","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/9.103adb83.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingcake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingcake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvest } from 'utils/callHelpers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\n// background-image: url('/images/cake-bg.svg');\nconst StyledFarmStakingCard = styled(Card)`\n  \n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvest(masterChefContract, farmWithBalance.pid, account)\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n    setPendingTx(false)\n  }, [account, balancesWithValue, masterChefContract])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        {/* <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} /> */}\n        <Block>\n          <Label>{t('UERN to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{t('UERN in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting UERN')\n                : t('Harvest all (%count%)', {\n                  count: balancesWithValue.length,\n                })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  padding: 40px;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('UERN Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"16px\">{t('Total UERN Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"16px\">{t('Total UERN Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          {/* <Text fontSize=\"14px\">{t('New UERN/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={20} /> */}\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    fetchFarmData()\n  }, [dispatch, setIsFetchingFarmData])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          return getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\n\n//  background-image: url('/images/pan-bg-mobile.svg');\n// background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\nconst Hero = styled.div`\n  align-items: center;\n \n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    \n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page >\n      <Hero>\n        <Heading style={{ fontSize: '60px' }} as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          {t('USEON')}\n        </Heading>\n        <Text style={{ fontSize: '35px', color: 'rgb(245 6 191)' }}>{t('World first USE2EARN Ecosystem')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n\n          {/* <LotteryCard /> */}\n        </Cards>\n        <CTACards>\n          <FarmStakingCard />\n          <CakeStats />\n          {/* <TotalValueLockedCard /> */}\n          <EarnAPRCard />\n          {/* <EarnAssetCard /> */}\n          {/* <WinCard /> */}\n        </CTACards>\n        <Cards>\n          {/* <CakeStats />\n          <TotalValueLockedCard /> */}\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '24px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}