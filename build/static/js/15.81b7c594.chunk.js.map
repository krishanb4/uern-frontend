{"version":3,"sources":["components/layout/Flex.tsx","utils/latinise.ts","components/PageHeader/PageHeader.tsx","components/SearchInput/SearchInput.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","hooks/useHarvest.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","components/ApyCalculatorModal/index.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useDelayedUnmount.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","utils/bscscan.ts","utils/callHelpers.ts","hooks/usePersistState.ts","hooks/useApprove.ts","components/Select/Select.tsx"],"names":["FlexLayout","styled","div","Latinise","latin_map","τ","Τ","latinise","input","replace","x","Outer","Box","theme","background","colors","gradients","bubblegum","Inner","Container","PageHeader","children","props","StyledInput","Input","InputWrapper","mediaQueries","sm","SearchInput","onChangeCallback","onChange","placeholder","useState","toggled","setToggled","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","onBlur","Wrapper","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","CoreTag","variant","outline","startIcon","mr","CommunityTag","DualTag","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","flexDirection","split","useStake","pid","account","useWeb3React","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","console","info","useUnstake","onUnstake","unstake","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","map","child","i","StyledTokenInput","isWarning","shadows","warning","inset","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","isBalanceZero","style","position","pl","fontSize","balance","balanceNumber","Number","toLocaleString","undefined","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","scale","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","valNumber","BigNumber","fullBalanceNumber","handleChange","currentTarget","validity","valid","handleSelectMax","title","disabled","isFinite","eq","gt","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","useHarvest","farmPid","onReward","harvest","HarvestAction","earnings","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsBusd","multipliedBy","toNumber","CardBusdValue","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","error","textTransform","pr","mt","UnlockButton","Grid","GridItem","ApyCalculatorModal","tokenPrice","apr","linkLabel","linkHref","earningTokenSymbol","roundingDecimals","compoundFrequency","performanceFee","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","num","getRoi","amountEarned","amountInvested","toFixed","maxWidth","freq","fee","ApyButton","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","toLocaleLowerCase","liquidity","earnLabel","dual","farmAPR","liquidityUrlPathParts","quoteToken","address","token","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","useEffect","timeoutId","setTimeout","clearTimeout","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","current","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lowercaseQuery","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","Page","checked","Select","options","option","marginLeft","sort","b","exact","renderContent","BASE_BSC_SCAN_URL","getBscScanTransactionUrl","transactionHash","getBscScanBlockNumberUrl","block","getBscScanBlockCountdownUrl","approve","methods","ethers","constants","MaxUint256","send","from","enterStaking","DEFAULT_TOKEN_DECIMAL","toString","gas","DEFAULT_GAS_LIMIT","on","tx","deposit","sousStake","sousChefContract","BIG_TEN","pow","sousStakeBnb","leaveStaking","withdraw","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","soushHarvest","soushHarvestBnb","BIG_ZERO","initialValue","localStorageKey","valueFromLS","localStorage","getItem","JSON","parse","setValue","setItem","stringify","useIfoApprove","tokenContract","spenderAddress","DropDownHeader","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","boxShadow","DropDownList","ul","ListItem","li","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","offsetWidth","offsetHeight"],"mappings":"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","file":"static/js/15.81b7c594.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport Container from '../layout/Container'\n\nconst Outer = styled(Box) <{ background?: string }>`\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\n`\n\nconst Inner = styled(Container)`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`\n\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\n  <Outer background={background} {...props}>\n    <Inner>{children}</Inner>\n  </Outer>\n)\n\nexport default PageHeader\n","import React, { useState, useMemo } from 'react'\nimport { Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder={t(placeholder)}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon, RefreshIcon, AutoRenewIcon, TagProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst BinanceTag: React.FC<TagProps> = (props) => {\n  return (\n    <Tag variant=\"binance\" outline startIcon={<BinanceIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      Binance\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, BinanceTag, DualTag, ManualPoolTag, CompoundingPoolTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n  // console.log(addLiquidityUrl);\n\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceNumber = Number(balance)\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\n    }\n    return balanceNumber.toLocaleString()\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n          setPendingTx(false)\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n\n\n\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n\n\n  const lpName = farm.lpSymbol.toUpperCase()\n\n  // console.log(Number(allowance));\n\n\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  // const isApproved = true\n\n  const web3 = useWeb3()\n  const dispatch = useAppDispatch()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n\n\n\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          UERN\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  tokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  tokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol = 'UERN',\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / tokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title={t('ROI')} onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('%symbol% per $1,000', { symbol: earningTokenSymbol })}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 1 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 7 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>{t('%num%d', { num: 30 })}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>{t('365d(APY)')}</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Box mb=\"28px\" maxWidth=\"280px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            'Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n            { freq: compoundFrequency.toLocaleString() },\n          )}\n        </Text>\n        {performanceFee > 0 && (\n          <Text mt=\"14px\" fontSize=\"12px\" color=\"textSubtle\">\n            {t('All estimated rates take into account this pool’s %fee%% performance fee', { fee: performanceFee })}\n          </Text>\n        )}\n      </Box>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // We assume the token name is coin pair + lp e.g. UERN-BNB LP, LINK-BNB LP,\n  // NAR-UERN LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n\n\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANUERN', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'UERN'\n\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n\n\n\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'UERN'\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n\n\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n\n    <Container>\n\n\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Image } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  // const farnusr = useFarmUser(pid)\n  // console.log(farnusr);\n\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon) <{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of UERN rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 UERN per block, a 40x farm would be getting 40 UERN per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\n// TODO: Use `Text` instead\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Button, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = 0\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>UERN </Title>\n        <Subtle>{t('Earned').toUpperCase()}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n\n\n\n\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n  const location = useLocation()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = getBep20Contract(lpAddress, web3)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{t('Staked').toUpperCase()}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Stake').toUpperCase()} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming').toUpperCase()}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{t('Enable Farm').toUpperCase()}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANUERN', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n\n\n\n  return (\n\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://pancakeswap.finance/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n\n\n\n\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANUERN', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/hay.png\" alt=\"mcdao illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import { BASE_BSC_SCAN_URL } from 'config'\n\nexport const getBscScanAddressUrl = (address: string) => {\n  return `${BASE_BSC_SCAN_URL}/address/${address}`\n}\n\nexport const getBscScanTransactionUrl = (transactionHash: string) => {\n  return `${BASE_BSC_SCAN_URL}/tx/${transactionHash}`\n}\n\nexport const getBscScanBlockNumberUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/${block}`\n}\n\nexport const getBscScanBlockCountdownUrl = (block: string | number) => {\n  return `${BASE_BSC_SCAN_URL}/block/countdown/${block}`\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState } from 'react'\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\n  }, [value, localStorageKey])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useMasterchef, useCake, useSousChef, useLottery, useCakeVaultContract } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n \n  \n \n  \n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError('Error', e?.message)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve UERN auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'UERN' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n // console.log(cakeContract);\n  \n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n  user-select: none;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n"],"sourceRoot":""}